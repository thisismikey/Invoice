# views.py
from django.shortcuts import render, redirect
from django.conf import settings
from django.core.files.storage import FileSystemStorage
from django.utils.dateparse import parse_date
from .forms import UploadFileForm
from django.http import HttpResponse
from .models import UploadedFile
from .Bert.test import BertModel
from .models import County, District, ItemBigTag, ItemSmallTag
from django.http import JsonResponse
import io
import pandas as pd
from .Graph.networks import ProductNetwork
import networks
import psycopg2
from django.db import connection
from main import PathList

BUY_WITH = 1
PRODUCT_IN_PATH = 2
RFM = 3
RFM_WITH_PRODUCT = 4


def uploadFile(request):
    if request.method == 'POST':
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            file = form.cleaned_data['file']
            if file.name.endswith('.csv'):
                df = pd.read_csv(file)
                b = BertModel()
                df = b.addItemTag(df)
                buffer = io.StringIO()
                df.to_csv(buffer, index=False)
                content = buffer.getvalue()
            else:
                df = pd.read_excel(file)
                b = BertModel()
                df = b.addItemTag(df)
                buffer = io.BytesIO()
                df.to_excel(buffer, index=False, engine='openpyxl')
                content = buffer.getvalue()

            fs = FileSystemStorage(location=settings.MEDIA_ROOT)
            filename = fs.save(
                file.name, io.BytesIO(content.encode('utf-8') if file.name.endswith('.csv') else content)
            )
            UploadedFile.objects.create(user=request.user, file_name=filename)
            fileUrl = fs.url(filename)
            return render(request, 'UploadFile.html', {'form': form, 'fileUrl': fileUrl})
    else:
        form = UploadFileForm()
    return render(request, 'UploadFile.html', {'form': form})


    ###行政區太多會往上跑的問題待修正
def getMainpage(request):
    return render(request, 'Mainpage.html')


def getSmallTags(request):
    bigtag = request.GET.get('bigtag')
    smallTags = ItemSmallTag.objects.filter(bigTag__name=bigtag)
    smallTagList = list(smallTags.values('id', 'name'))
    return JsonResponse({'smallTags': smallTagList})


    ###directly select smallTag and Product?
def getProducts(request):
    smallTag = request.GET.get('smallTag')
    with connection.cursor() as cursor:
        cursor.execute("SELECT DISTINCT item_name FROM test WHERE item_tag = %s", [smallTag])
        rows = cursor.fetchall()
    products = [row[0] for row in rows]
    return JsonResponse({'products': products})


###行政區太多會往上跑的問題待修正###
def getDistrict(request):
    county = request.GET.get('county')
    districts = District.objects.filter(county__name=county)
    districtList = list(districts.values('id', 'name'))
    return JsonResponse({'districts': districtList})


def _selectArea(request, pictureType):
    counties = County.objects.all()
    selectedCounty = request.session.get('selectedCounty', '')
    errorMessage = ""

    if request.method == 'POST':
        county = request.POST.get('county')
        if not county:
            errorMessage = "請選擇縣/市"
        else:
            request.session['selectedCounty'] = county
            if pictureType == BUY_WITH:
                return redirect('/draw_buy_with/?step=select_path_time')
            elif pictureType == PRODUCT_IN_PATH:
                return redirect('/draw_product_in_path/?step=select_time')
            elif pictureType == RFM:
                return redirect('/rfm/?step=select_path_time')
            elif pictureType == RFM_WITH_PRODUCT:
                return redirect('/rfm_with_product/?step=select_path_time')

    return render(
        request, 'Area.html', {
            'counties': counties,
            'selectedCounty': selectedCounty,
            'pictureType': pictureType,
            'errorMessage': errorMessage
        }
    )


###這邊會改成有分類的前幾+交易量前幾###
def _filterStores(countyName, districtName=None):
    if districtName:
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT DISTINCT store_brand_name FROM test WHERE county = %s AND city_area = %s",
                [countyName, districtName]
            )
            rows = cursor.fetchall()
    else:
        with connection.cursor() as cursor:
            cursor.execute("SELECT DISTINCT store_brand_name FROM test WHERE county = %s", [countyName])
            rows = cursor.fetchall()
    storeBrands = [row[0] for row in rows]

    return storeBrands


def _filterDistrict(countyName):
    if countyName:
        districtList = District.objects.filter(county__name=countyName).values_list('name', flat=True)
        return list(districtList)
    return []


def _filterBigTags(request):
    countyName = request.session.get('selectedCounty', '')
    districtName = request.session.get('districtName', '')
    selectedStartTime = request.session.get('startTime', '')
    selectedEndTime = request.session.get('endTime', '')
    # selectedStore = request.session.get('store', '')
    storeTypeList = request.session.get('storeTypeList', '')

    query = "SELECT DISTINCT item_tag FROM test WHERE county = %s"
    params = [countyName]

    # if districtName:
    #     query += " AND city_area = %s"
    #     params.append(districtName)

    if selectedStartTime:
        query += " AND datetime >= %s::date"
        params.append(f"{selectedStartTime}-01")

    if selectedEndTime:
        query += " AND datetime < (%s::date + interval '1 month')"
        params.append(f"{selectedEndTime}-01")

    if storeTypeList:
        # 使用 IN 语句匹配列表中的任意值
        query += " AND store_brand_name IN %s"
        params.append(tuple(storeTypeList))

    with connection.cursor() as cursor:
        cursor.execute(query, params)
        rows = cursor.fetchall()

    smallTags = [row[0] for row in rows]
    ###暫時反向尋找，之後建立大標籤之欄位###
    bigTags = ItemSmallTag.objects.filter(name__in=smallTags).values_list('bigTag__name', flat=True).distinct()
    bigTagsList = list(bigTags)
    return bigTagsList


def _selectPathAndTime(request, pictureType):
    countyName = request.session.get('selectedCounty', '')
    districtName = request.session.get('districtName', '')
    # stores = _filterStores(countyName)

    selectedStartTime = request.session.get('startTime', '')
    selectedEndTime = request.session.get('endTime', '')
    storeType = request.session.get('storeType', '')
    storeTypeList = request.session.get('storeTypeList', '')
    errorMessage = request.GET.get('error_message', '')

    if request.method == 'POST':
        startTime = request.POST.get('start_time')
        endTime = request.POST.get('end_time')
        storeType = request.POST.get('store')
        storeTypeList = PathList.getStoreList(storeType)
        request.session['startTime'] = startTime
        request.session['endTime'] = endTime
        request.session['storeType'] = storeType
        request.session['storeTypeList'] = storeTypeList

        startDate = parse_date(startTime)
        endDate = parse_date(endTime)

        if startDate and endDate and startDate >= endDate:
            errorMessage = "開始時間必須早於結束時間"
        else:
            if pictureType == BUY_WITH:
                return redirect('/draw_buy_with/?step=select_tag')
            elif pictureType == PRODUCT_IN_PATH:
                return redirect('/draw_product_in_path/?step=select_tag')
            elif pictureType == RFM:
                return redirect('/rfm/?step=display_picture')
            elif pictureType == RFM_WITH_PRODUCT:
                return redirect('/rfm_with_product/?step=select_tag')

    if pictureType == PRODUCT_IN_PATH:
        return render(
            request,
            'Time.html',
            {
                # 'stores': stores,
                'startTime': selectedStartTime,
                'endTime': selectedEndTime,
                'errorMessage': errorMessage,
            }
        )
    else:
        return render(
            request,
            'PathAndTime.html',
            {
                # 'stores': stores,
                'startTime': selectedStartTime,
                'endTime': selectedEndTime,
                'pictureType': pictureType,
                'errorMessage': errorMessage,
            }
        )


def _selectTag(request, pictureType):

    selectedBigTag = request.session.get('bigTag', '')
    selectedSmallTag = request.session.get('smallTag', '')
    selectedProduct = request.session.get('product', '')

    if request.method == 'POST':
        bigTag = request.POST.get('bigTag')
        smallTag = request.POST.get('smallTag')
        product = request.POST.get('product')
        request.session['bigTag'] = bigTag
        request.session['smallTag'] = smallTag
        request.session['product'] = product
        if not smallTag:
            errorMessage = '請選擇子分類'
            return redirect(f'/draw_buy_with/?step=select_tag&error_message={errorMessage}')

        if pictureType == BUY_WITH:
            return redirect('/draw_buy_with/?step=display_picture')
        elif pictureType == PRODUCT_IN_PATH:
            return redirect('/draw_product_in_path/?step=display_picture')
        elif pictureType == RFM_WITH_PRODUCT:
            return redirect('/rfm_with_product/?step=display_picture')

    bigTags = _filterBigTags(request)
    if not bigTags:
        return redirect('/draw_buy_with/?step=select_path_time&error_message=此區間無資料，請重新選擇。')
    errorMessage = request.GET.get('errorMessage', '')
    return render(
        request, 'Tag.html', {
            'bigTags': bigTags,
            'bigTag': selectedBigTag,
            'smallTag': selectedSmallTag,
            'product': selectedProduct,
            'pictureType': pictureType,
            'errorMessage': errorMessage
        }
    )


def _displayPic(request, displayType, pictureType):
    startTime = request.session.get('startTime', '')
    endTime = request.session.get('endTime', '')
    countyName = request.session.get('selectedCounty', '')
    if pictureType in (RFM_WITH_PRODUCT, RFM):
        segment = request.session.get('segment', 'Potential Loyalist')
    else:
        segment = request.session.get('segment', '')

    district = request.session.get('selectedDistrict', '') # narrow down 才有
    storeType = request.session.get('storeType', '')
    storeTypeList = request.session.get('storeTypeList', '')
    smallTag = request.session.get('smallTag', '')
    product = request.session.get('product', '')

    districtList = _filterDistrict(countyName)
    storesToQuery = storeTypeList
    # stores = _filterStores(districtName)
    if request.method == 'POST':
        startTime = request.POST.get('start_time')
        endTime = request.POST.get('end_time')
        district = request.POST.get('district')
        store = request.POST.get('store')
        segment = request.POST.get('segment')
        if store:
            storesToQuery = store
        # districtName = District.objects.get(id=districtId).name

        request.session['startTime'] = startTime
        request.session['endTime'] = endTime
        request.session['selectedDistrict'] = district
        # request.session['districtName'] = districtName
        request.session['store'] = store
        request.session['segment'] = segment
        # request.session['selectedPath'] = pathId

    relationship, articulationPoint, communities = _drawPic(
        countyName,
        smallTag,
        startTime,
        endTime,
        product,
        storesToQuery,
        district, #narrow down
        segment,
    )

    if pictureType == BUY_WITH:
        return render(
            request, 'Display.html', {
                'startTime': startTime,
                'endTime': endTime,
                'districtList': districtList,
                'selectedPath': request.session.get('selectedPath', ''),
                'displayType': displayType,
                'stores': storeTypeList,
                'relationship': relationship,
                'articulationPoint': articulationPoint,
                'communities': communities,
            }
        )
    elif pictureType in (RFM, RFM_WITH_PRODUCT):
        return render(
            request, 'DisplayRFM.html', {
                'startTime': startTime,
                'endTime': endTime,
                'districtList': districtList,
                'selectedPath': request.session.get('selectedPath', ''),
                'displayType': displayType,
                'stores': storeTypeList,
                'relationship': relationship,
                'articulationPoint': articulationPoint,
                'communities': communities,
            }
        )

    else:
        return render(
            request, 'ProductInPath.html', {
                'startTime': startTime,
                'endTime': endTime,
                'districtList': districtList,
                'stores': storeTypeList,
                'selectedCounty': countyName,
                'selectedPath': request.session.get('selectedPath', ''),
                'picture': graphHtml,
            }
        )


def _drawPic(
    countyName,
    smallTag,
    startTime=None,
    endTime=None,
    product=None,
    storeTypeList=None,
    districtName=None,
    segment=None
):
    # api storelist 要改成能接一個list
    network = ProductNetwork(username='admin', network_name='啤酒網路圖')
    network.query(
        county=countyName,
        city_area=districtName,
        item_tag=smallTag,
        datetime_lower_bound=startTime,
        datetime_upper_bound=endTime,
        store_brand_name=storeTypeList,
        item_name=product,
        segment=segment,
    )
    # network.execute_query()
    # network.analysis(limits=100)
    network.create_network()
    relationship, articulationPoint, communities = network.vis_all_graph()
    return relationship, articulationPoint, communities


def drawBuyWith(request):
    displayType = request.GET.get('displayType', 'Regular')
    step = request.GET.get('step', 'select_area')
    pictureType = BUY_WITH
    if step == 'select_area':
        request.session.clear()
        return _selectArea(request, pictureType)

    elif step == 'select_path_time':
        return _selectPathAndTime(request, pictureType)

    elif step == 'select_tag':
        return _selectTag(request, pictureType)

    elif step == 'display_picture':
        return _displayPic(request, displayType, pictureType)

    return redirect('/draw_buy_with/?step=select_area')


def showInfo(request):
    displayType = request.GET.get('displayType', 'Regular')
    content = ""

    if displayType == "Articulation Points":
        content = "Information about Articulation Points."
    elif displayType == "Community":
        content = "Information about Community."
    else:
        content = "Information about Regular."

    return JsonResponse({"content": content})


##防呆
##資料篩選


def drawPath(request):
    displayType = request.GET.get('displayType', 'Regular')
    step = request.GET.get('step', 'select_area')
    pictureType = PRODUCT_IN_PATH
    if step == 'select_area':
        return _selectArea(request, pictureType)

    elif step == 'select_time':
        selectedStartTime = request.session.get('startTime', '')
        selectedEndTime = request.session.get('endTime', '')

        if request.method == 'POST':
            startTime = request.POST.get('start_time')
            endTime = request.POST.get('end_time')
            request.session['startTime'] = startTime
            request.session['endTime'] = endTime

            return redirect('/draw_product_in_path/?step=select_tag')

        return render(request, 'Time.html', {
            'startTime': selectedStartTime,
            'endTime': selectedEndTime,
        })

    elif step == 'select_tag':
        return _selectTag(request, pictureType)

    elif step == 'display_picture':
        return _displayPic(request, displayType, pictureType)

    return redirect('/draw_product_in_path/?step=select_area')


def analyze(request):
    return render(request, 'Analysis.html')


def displayOvertime(request):
    return render(request, 'Overtime.html')


def getDeeperInsight(request):
    table = [
        {
            'product': '*麒麟*一番搾500cc罐',
            'counts': 76,
            'percentage': '1.890077'
        },
        {
            'product': '(A)*台灣啤酒500cc玻璃瓶',
            'counts': 65,
            'percentage': '1.616513'
        },
        # getData()
    ]

    context = {'table': table}
    return render(request, 'DeeperInsight.html', context)


def drawRFM(request):
    step = request.GET.get('step', 'select_area')
    pictureType = RFM

    displayType = request.GET.get('displayType', 'Regular')
    if step == 'select_area':
        request.session.clear()
        return _selectArea(request, pictureType)

    elif step == 'select_path_time':
        return _selectPathAndTime(request, pictureType)

    elif step == 'display_picture':
        return _displayPic(request, displayType, pictureType)

    return redirect('/draw_buy_with/?step=select_area')


def drawRFMwithProduct(request):
    step = request.GET.get('step', 'select_area')
    pictureType = RFM_WITH_PRODUCT

    displayType = request.GET.get('displayType', 'Regular')
    if step == 'select_area':
        return _selectArea(request, pictureType)

    elif step == 'select_path_time':
        return _selectPathAndTime(request, pictureType)

    elif step == 'select_tag':
        return _selectTag(request, pictureType)

    elif step == 'display_picture':
        return _displayPic(request, displayType, pictureType)

    return redirect('/rfm_with_product/?step=select_area')


def _displayRFM(request):
    rfms = [
        "Champions", "Loyal Accounts", "Low Spenders", "Potential Loyalist", "Promising", "New Active Accounts",
        "Need Attention", "About to Sleep", "At Risk", "Lost"
    ]

    if request.method == "POST":
        rfmType = request.POST.get('district', 'Potential Loyalist')
    else:
        rfmType = 'Potential Loyalist'

    context = {
        'rfmType': rfmType,
        'rfms': rfms,
    }

    return render(request, 'RFM.html', context)
